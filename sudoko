// Java program for above approach
public class Sudoku {

	
	static int N = 9;

	
	static boolean sudoku(int network[][], int row,
							int column)
	{

		
		if (row == N - 1 && column == N)
			return true;

		
		if (column == N) {
			row++;
			column = 0;
		}

		
		if (network[row][column] != 0)
			return sudoku(grid, row, col + 1);

		for (int num = 1; num < 10; num++) {

			
			if (isSafe(network, row, column, num)) {

				
				network[row][column] = num;

				
				if (sudoku(grid, row, col + 1))
					return true;
			}
			
			network[row][column] = 0;
		}
		return false;
	}

	
	static void print(int[][] network)
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(network[i][j] + " ");
			System.out.println();
		}
	}

	
	static boolean isSafe(int[][] network, int row, int column,
						int num)
	{

		
		for (int x = 0; x <= 8; x++)
			if (network[row][x] == num)
				return false;

		
		for (int x = 0; x <= 8; x++)
			if (grid[x][column] == num)
				return false;

		
		int startRow = row - row % 3, startColumn
									= col - column % 3;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				if (grid[i + startRow][j + startColumn] == num)
					return false;

		return true;
	}

	
	public static void main(String[] args)
	{
		int network[][] = { { 3, 0, 6, 5, 0, 8, 4, 0, 0 },
						{ 5, 2, 0, 0, 0, 0, 0, 0, 0 },
						{ 0, 8, 7, 0, 0, 0, 0, 3, 1 },
						{ 0, 0, 3, 0, 1, 0, 0, 8, 0 },
						{ 9, 0, 0, 8, 6, 3, 0, 0, 5 },
						{ 0, 5, 0, 0, 9, 0, 6, 0, 0 },
						{ 1, 3, 0, 0, 0, 0, 2, 5, 0 },
						{ 0, 0, 0, 0, 0, 0, 0, 7, 4 },
						{ 0, 0, 5, 2, 0, 6, 3, 0, 0 } };

		if (sudoku(grid, 0, 0))
			print(grid);
		else
			System.out.println("No Solution exists");
	}
	
}
